	public OfferSea createFromOfferAndActivityOperationAndMobile(Offer offer, ActivityOperation activityOperation, Activity activity, com.tmaxx.dto.mobile.tmaxx.mobile2.ActivityFromMobile mobileDto) throws Exception {
		OfferSea offerSea = this.newEntity();
		if(offer != null){
			offerSea = this.createFromOffer(offer.getId());
		}
		offerSea.setTransportDirection(activityOperation.getTransportDirection());
		offerSea.setIncoterm(activityOperation.getIncoterm());
		if(offerSea.getValidFrom() == null){
			offerSea.setValidFrom(LocalDateTime.now());
		}
		if(offerSea.getValidTo() == null){
			offerSea.setValidTo(LocalDateTime.now().plusDays(7));
		}
		offerSea.setCustomer(activity.getCompany());
		offerSea.setSalesChannel(activityOperation.getSalesChannel());
		offerSea.setPartialFull("F");
		offerSea.setDescription(activityOperation.getDescription());
		offerSea.setSalesRepresentative(activityOperation.getSalesRepresentative());
		offerSea.setActivityOperation(activityOperation);
		offerSea.setVolume(activityOperation.getVolume());
		offerSea.setFromPort(activityOperation.getSeaDeparturePort());
		offerSea.setToPort(activityOperation.getSeaArrivalPort());
		offerSea.setLoadCountry(activityOperation.getDepartureCountry());
		offerSea.setLoadCity(activityOperation.getDepartureCity());
		offerSea.setUnloadCountry(activityOperation.getArrivalCountry());
		offerSea.setUnloadCity(activityOperation.getArrivalCity());
		offerSea.setLoadPlace(activityOperation.getLoadPlace());
		offerSea.setUnloadPlace(activityOperation.getUnloadPlace());
		offerSea.setLoadAddress(activityOperation.getLoadAddress());
		offerSea.setUnloadAddress(activityOperation.getUnloadAddress());
		offerSea.setLoadZip(activityOperation.getLoadZip());
		offerSea.setUnloadZip(activityOperation.getUnloadZip());
		offerSea.setLoadAddress(activityOperation.getLoadAddress());
		offerSea.setUnloadAddress(activityOperation.getUnloadAddress());
		offerSea.setLoadCountry(activityOperation.getLoadCountry());
		offerSea.setUnloadCountry(activityOperation.getUnloadCountry());
		offerSea.setLoadCity(activityOperation.getLoadCity());
		offerSea.setUnloadCity(activityOperation.getUnloadCity());
		offerSea.setLoadDistrict(activityOperation.getLoadDistrict());
		offerSea.setUnloadDistrict(activityOperation.getUnloadDistrict());
		offerSea.setDefination(activityOperation.getGoodDefination());
		offerSea.setShipOwnernotShow(mobileDto.getShipOwnerNotShow());
		offerSea.setPortFilling(mobileDto.getPortFilling());
		offerSea.setGoodTypesDef(offer.getGoodTypesDef());
		if (constantService.getBoolean("OFFER_CREATE_SET_WHOSE_BUSINESS", null)) {
			offerSea.setWhoseBusiness(mobileDto.getWhoseBusiness());
		}
		offerSea = this.saveWithControl(offerSea, false);
		Boolean isOfferSeaChargeOnPosition = constantService.getBoolean("IS_OFFER_SEA_CHARGES_ON_POSITION_FROM_MOBILE", null);
		List<ActivityOperationDetail> activityOperationDetails = activityOperationDetailService.getByActivityOperationId(activityOperation.getId());
		if(activityOperation.getSeaAllocations() != null && activityOperation.getSeaAllocations().size() > 0){
			int i = 0;
			for(SeaAllocation seaAllocation : activityOperation.getSeaAllocations()){
				SeaFreightBuyTariff seaFreightBuyTariff = null;
				if (!seaAllocation.getSeaContractAllocations().isEmpty()) {
					seaFreightBuyTariff = seaAllocation.getSeaContractAllocations().get(0).getSeaContract().getSeaFreightBuyTariff();
				}
				SeaFreightTariff seaFreightTariff = seaAllocation.getSeaFreightTariff();
				SeaAllocationMobile seaAllocationMobile = null;
				if(mobileDto != null && !mobileDto.getSeaAllocations().isEmpty()){
					seaAllocationMobile = mobileDto.getSeaAllocations().stream().filter(e -> seaAllocation.getId().equals(e.getId())).findAny().orElse(null);
				}
				List<SeaContainerReservationMobile> seaContainerReservationMobiles = null;
				SeaContainerReservationMobile seaContainerReservationMobile = null;
				if(seaAllocationMobile != null && seaAllocationMobile.getSeaFreightTariffDetMobiles() != null && seaAllocationMobile.getSeaFreightTariffDetMobiles().size() >0){
					for(SeaFreightTariffDetMobile seaFreightTariffDetMobile : seaAllocationMobile.getSeaFreightTariffDetMobiles()){
						seaContainerReservationMobiles = seaFreightTariffDetMobile.getSeaContainerRezervations();
						OfferSea offerSea1 = this.getByOfferIdAndFromPortIdAndToPortId(offer.getId(), seaFreightTariffDetMobile.getFromPort().getId(), seaFreightTariffDetMobile.getToPort().getId());
						if(offerSea1 == null){
							i = 0;
							offerSea1 = this.newEntity();
							if(offer != null){
								offerSea1 = this.createFromOffer(offer.getId());
							}
							offerSea1.setTransportDirection(activityOperation.getTransportDirection());
							offerSea1.setIncoterm(activityOperation.getIncoterm());
							if(offerSea1.getValidFrom() == null){
								offerSea1.setValidFrom(LocalDateTime.now());
							}
							if(offerSea1.getValidTo() == null){
								offerSea1.setValidTo(LocalDateTime.now().plusDays(7));
							}
							offerSea1.setCustomer(activity.getCompany());
							offerSea1.setSalesChannel(activityOperation.getSalesChannel());
							offerSea1.setPartialFull("F");
							offerSea1.setDescription(activityOperation.getDescription());
							offerSea1.setSalesRepresentative(activityOperation.getSalesRepresentative());
							offerSea1.setActivityOperation(activityOperation);
							offerSea1.setVolume(activityOperation.getVolume());
							offerSea1.setFromPort(seaportService.getById(seaFreightTariffDetMobile.getFromPort().getId()));
							offerSea1.setToPort(seaportService.getById(seaFreightTariffDetMobile.getToPort().getId()));
							offerSea1.setLoadCountry(activityOperation.getDepartureCountry());
							offerSea1.setLoadCity(activityOperation.getDepartureCity());
							offerSea1.setUnloadCountry(activityOperation.getArrivalCountry());
							offerSea1.setUnloadCity(activityOperation.getArrivalCity());
							offerSea1.setLoadPlace(activityOperation.getLoadPlace());
							offerSea1.setUnloadPlace(activityOperation.getUnloadPlace());
							offerSea1.setLoadAddress(activityOperation.getLoadAddress());
							offerSea1.setUnloadAddress(activityOperation.getUnloadAddress());
							offerSea1.setLoadZip(activityOperation.getLoadZip());
							offerSea1.setUnloadZip(activityOperation.getUnloadZip());
							offerSea1.setLoadCountry(activityOperation.getLoadCountry());
							offerSea1.setUnloadCountry(activityOperation.getUnloadCountry());
							offerSea1.setLoadCity(activityOperation.getLoadCity());
							offerSea1.setUnloadCity(activityOperation.getUnloadCity());
							offerSea1.setLoadDistrict(activityOperation.getLoadDistrict());
							offerSea1.setUnloadDistrict(activityOperation.getUnloadDistrict());
							offerSea1.setShipOwnernotShow(mobileDto.getShipOwnerNotShow());
							offerSea1.setPortFilling(mobileDto.getPortFilling());
							offerSea1 = this.saveWithControl(offerSea1, false);
						}
						OfferSeaDetail offerSeaDetail = offerSeaDetailService.newEntity();
						if(i == 0 && !offerSea1.getOfferSeaDetails().isEmpty()){
							offerSeaDetail = offerSea1.getOfferSeaDetails().get(0);
						}
						offerSeaDetail.setCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
						offerSeaDetail.setBuyCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
						offerSeaDetail.setShipOwner(seaAllocation.getShipOwner());
						offerSeaDetail.setSeaAllocation(seaAllocation);
						offerSeaDetail.setOfferSea(offerSea1);
						offerSeaDetail.setImo(activityOperation.getImo());
						offerSeaDetail.setClassInfo(activityOperation.getClassInfo());
						offerSeaDetail.setUnNo(activityOperation.getUnNo());
						offerSeaDetail.setFlashPoint(activityOperation.getFlashPoint());
						offerSeaDetail.setAmount(seaFreightTariffDetMobile.getAmount());
						offerSeaDetail.setBuyAmount(seaFreightTariffDetMobile.getBuyAmount());
						offerSeaDetail.setTransitTime(seaFreightTariffDetMobile.getTransitTime());
						offerSeaDetail.setFreeTime(seaFreightTariffDetMobile.getFreeTime());
						offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
						List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getByOfferSeaDetailIdAndContainerTypeNull(offerSeaDetail.getId());
						if(!seaContainerRezervations.isEmpty()){
							seaContainerRezervationService.deleteAll(seaContainerRezervations);
							offerSeaDetail.getSeaContainerRezervations().removeAll(seaContainerRezervations);
						}
						offerSeaDetail = offerSeaDetailService.getById(offerSeaDetail.getId());
						int j = 0;
						for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
							SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
							seaContainerRezervation.setOfferSeaDetail(offerSeaDetail);
							seaContainerRezervation.setCount(activityOperationDetail.getCount());
							seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
							seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
							seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
							seaContainerRezervation.setLength(activityOperationDetail.getLength());
							seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
							seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
							seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
							if(seaContainerReservationMobiles != null && seaContainerReservationMobiles.size() >0){
								if (activityOperationDetail.getTonnage() != null && activityOperationDetail.getTonnage() != 0d) {
									List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaContainerReservationMobiles.stream()
											.filter(e -> activityOperationDetail.getSeaContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= activityOperationDetail.getTonnage()).collect(Collectors.toList());
									if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
										tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
										seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
									} else {
										seaContainerReservationMobile = seaContainerReservationMobiles.stream().filter(e -> activityOperationDetail.getSeaContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
								} else {
									seaContainerReservationMobile = seaContainerReservationMobiles.stream().filter(e -> activityOperationDetail.getSeaContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
								}
								if(seaContainerReservationMobile != null){
									offerSeaDetail.setCurrency(currencyService.getById(seaAllocationMobile.getSeaFreightTariffDetMobiles().get(0).getCurrency().getId()));
									seaContainerRezervation.setFareAmount(seaContainerReservationMobile.getFareAmount());
									if (seaFreightTariffDetMobile.getId() != null) {
										SeaFreightTariffDet seaFreightTariffDet = seaFreightTariffDetService.getById(seaFreightTariffDetMobile.getId());
										seaContainerRezervation.setSeaFreightTariff(seaFreightTariffDet.getSeaFreightTariff());
									}
									if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
										for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
											Company itemCompany = null;
											if(seaTariffDetMobile.getItemCompany() != null) {
												itemCompany = companyService.getById(seaTariffDetMobile.getItemCompany().getId());
											}
											if(j == 0){
												OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
												offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
												offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
												offerSeaCharge.setInvoiceItemDC("DB");
												offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
												if (isOfferSeaChargeOnPosition) {
													if (offerSeaDetail.getIsPosSaleFreight()) {
														offerSeaCharge.setGoodPosition("POSITION");
													}
												} else {
													offerSeaCharge.setGoodPosition("GOOD");
												}
												offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
												offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
												offerSeaCharge.setInvoiceItemCompany("customer");
												offerSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
												offerSeaCharge.setItemCompany(itemCompany);
												if (seaTariffDetMobile.getId() != null) {
													SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
													if(seaTariffDet != null){
														offerSeaCharge.setSeaTariffDet(seaTariffDet);
														offerSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
														offerSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
														//offerSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
														//offerSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
													}
												}
												offerSeaChargesService.save(offerSeaCharge);
											} else {
												List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail.getId());
												if(!offerSeaCharges.isEmpty()){
													OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
													if(offerSeaCharges1 == null){
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															offerSeaCharge.setItemCompany(itemCompany);
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	offerSeaCharge.setSeaTariffDet(seaTariffDet);
																	offerSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	offerSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	//offerSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	//offerSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												} else {
													if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
														OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
														offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
														offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														offerSeaCharge.setInvoiceItemDC("DB");
														offerSeaCharge.setItemCompany(itemCompany);
														offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														if (isOfferSeaChargeOnPosition) {
															if (offerSeaDetail.getIsPosSaleFreight()) {
																offerSeaCharge.setGoodPosition("POSITION");
															}
														} else {
															offerSeaCharge.setGoodPosition("GOOD");
														}
														offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
														offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														offerSeaCharge.setInvoiceItemCompany("customer");
														offerSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																offerSeaCharge.setSeaTariffDet(seaTariffDet);
																offerSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																offerSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																//offerSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																//offerSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														offerSeaChargesService.save(offerSeaCharge);
													}
												}
											}
										}
									}
								}
							}
							seaContainerRezervationService.save(seaContainerRezervation);
							j++;
						}
						if (seaFreightBuyTariff != null) {
							offerService.calculateSeaFreightBuyTariffWithTariff(offerSeaDetail.getId(),seaFreightBuyTariff.getId());
						}
						if(seaContainerReservationMobile == null){
							offerService.calculateSeaFreightTariffWithTariff(offerSeaDetail.getId(),seaFreightTariff.getId());
						}

						/*
						*   calculateSeaFreightBuyTariffWithTariff içinde alış tarifesindeki serbest zamanı ayarladığı için yeniden serbest zamanı ayarlanıyor.
						* */
						offerSeaDetail.setFreeTime(seaFreightTariffDetMobile.getFreeTime());
						offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);

						offerService.createOfferSeaBuyCharges(offerSeaDetail.getId(), false);
						offerService.calculateIncoOfferSeaBuyCharges(offerSeaDetail.getId());
						//offerService.calculateIncoOfferSeaCharges(offerSeaDetail.getId());


						if(mobileDto.getFreeTime() != null && (mobileDto.getSeaAllocations() == null || mobileDto.getSeaAllocations().size() == 0)) offerSeaDetail.setFreeTime(mobileDto.getFreeTime());
						offerSeaDetailService.save(offerSeaDetail);
					}
				}
				i++;
			}
		} else {
			OfferSeaDetail offerSeaDetail = offerSeaDetailService.newEntity();
			if(offerSea != null && offerSea.getOfferSeaDetails() != null && offerSea.getOfferSeaDetails().size() >0){
				offerSeaDetail = offerSea.getOfferSeaDetails().get(0);
			}
			offerSeaDetail.setShipOwner(activityOperation.getShipOwner());
			offerSeaDetail.setOfferSea(offerSea);
			offerSeaDetail.setImo(activityOperation.getImo());
			offerSeaDetail.setClassInfo(activityOperation.getClassInfo());
			offerSeaDetail.setUnNo(activityOperation.getUnNo());
			offerSeaDetail.setFlashPoint(activityOperation.getFlashPoint());
			if(constantService.getBoolean("OFFER_CURRENCY",null)) {
				offerSeaDetail.setCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
				offerSeaDetail.setBuyCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
			} else {
				offerSeaDetail.setCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
				offerSeaDetail.setBuyCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
			}
			offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
			List<SeaContainerRezervation> seaContainerRezervations1 = seaContainerRezervationService.getByOfferSeaDetailIdAndContainerTypeNull(offerSeaDetail.getId());
			if(!seaContainerRezervations1.isEmpty()){
				seaContainerRezervationService.deleteAll(seaContainerRezervations1);
				offerSeaDetail.getSeaContainerRezervations().removeAll(seaContainerRezervations1);
			}
			offerSeaDetail = offerSeaDetailService.getById(offerSeaDetail.getId());
				for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
					SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
					seaContainerRezervation.setOfferSeaDetail(offerSeaDetail);
					seaContainerRezervation.setCount(activityOperationDetail.getCount());
					seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
					ActivityFromMobileSeaContainer activityFromMobileSeaContainer = mobileDto.getEquipments().stream().filter(ac -> ac.getId().equals(activityOperationDetail.getId())).findAny().orElse(null);
					seaContainerRezervation.setSalesTargetAmount(activityFromMobileSeaContainer != null ? activityFromMobileSeaContainer.getSalesTargetAmount() : null);
					seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
					seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
					seaContainerRezervation.setLength(activityOperationDetail.getLength());
					seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
					seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
					seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
					seaContainerRezervationService.save(seaContainerRezervation);
				}
			if (mobileDto != null && mobileDto.getSeaFrightBuyTariffDetMobiles() != null && mobileDto.getSeaFrightBuyTariffDetMobiles().size() > 0) {
				int i = 0;
				for(SeaFreightBuyTariffDetMobile seaFreightBuyTariffDetMobile : mobileDto.getSeaFrightBuyTariffDetMobiles()){
					OfferSea offerSea1 = this.getByOfferIdAndFromPortIdAndToPortId(offer.getId(), seaFreightBuyTariffDetMobile.getFromPort().getId(), seaFreightBuyTariffDetMobile.getToPort().getId());
					Boolean offerSeaNull = Boolean.FALSE;
					if(offerSea1 == null){
						offerSeaNull = Boolean.TRUE;
						i = 0;
						offerSea1 = this.newEntity();
						if(offer != null){
							offerSea1 = this.createFromOffer(offer.getId());
						}
						offerSea1.setTransportDirection(activityOperation.getTransportDirection());
						offerSea1.setIncoterm(activityOperation.getIncoterm());
						if(offerSea1.getValidFrom() == null){
							offerSea1.setValidFrom(LocalDateTime.now());
						}
						if(offerSea1.getValidTo() == null){
							offerSea1.setValidTo(LocalDateTime.now().plusDays(7));
						}
						offerSea1.setCustomer(activity.getCompany());
						offerSea1.setSalesChannel(activityOperation.getSalesChannel());
						offerSea1.setPartialFull("F");
						offerSea1.setDescription(activityOperation.getDescription());
						offerSea1.setSalesRepresentative(activityOperation.getSalesRepresentative());
						offerSea1.setActivityOperation(activityOperation);
						offerSea1.setVolume(activityOperation.getVolume());
						offerSea1.setFromPort(seaportService.getById(seaFreightBuyTariffDetMobile.getFromPort().getId()));
						offerSea1.setToPort(seaportService.getById(seaFreightBuyTariffDetMobile.getToPort().getId()));
						offerSea1.setLoadCountry(activityOperation.getDepartureCountry());
						offerSea1.setLoadCity(activityOperation.getDepartureCity());
						offerSea1.setUnloadCountry(activityOperation.getArrivalCountry());
						offerSea1.setUnloadCity(activityOperation.getArrivalCity());
						offerSea1.setLoadPlace(activityOperation.getLoadPlace());
						offerSea1.setUnloadPlace(activityOperation.getUnloadPlace());
						offerSea1.setLoadAddress(activityOperation.getLoadAddress());
						offerSea1.setUnloadAddress(activityOperation.getUnloadAddress());
						offerSea1.setLoadZip(activityOperation.getLoadZip());
						offerSea1.setUnloadZip(activityOperation.getUnloadZip());
						offerSea1.setLoadCountry(activityOperation.getLoadCountry());
						offerSea1.setUnloadCountry(activityOperation.getUnloadCountry());
						offerSea1.setLoadCity(activityOperation.getLoadCity());
						offerSea1.setUnloadCity(activityOperation.getUnloadCity());
						offerSea1.setLoadDistrict(activityOperation.getLoadDistrict());
						offerSea1.setUnloadDistrict(activityOperation.getUnloadDistrict());
						offerSea1.setShipOwnernotShow(mobileDto.getShipOwnerNotShow());
						offerSea1.setPortFilling(mobileDto.getPortFilling());
						offerSea1 = this.saveWithControl(offerSea1, false);
					}
					offerSeaDetail = offerSeaDetailService.newEntity();
					if(i == 0 && !offerSea1.getOfferSeaDetails().isEmpty()){
						offerSeaDetail = offerSea1.getOfferSeaDetails().get(0);
						if (offerSeaNull) {
							for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
								SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
								seaContainerRezervation.setOfferSeaDetail(offerSeaDetail);
								seaContainerRezervation.setCount(activityOperationDetail.getCount());
								seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
								seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
								seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
								seaContainerRezervation.setLength(activityOperationDetail.getLength());
								seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
								seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
								seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
								seaContainerRezervationService.save(seaContainerRezervation);
							}
						}
					}
					if(i == 0){
						if(!seaFreightBuyTariffDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail.getId());
							if(!seaContainerRezervations.isEmpty()){
								int j = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									if(seaContainerRezervation.getContainerType() == null){
										continue;
									}
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFreightBuyTariffDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFreightBuyTariffDetMobile.getId());
									}
									if(seaContainerReservationMobile != null){
										if (seaContainerReservationMobile.getBuyFareAmount() != null)
											seaContainerRezervation.setBuyFareAmount(seaContainerReservationMobile.getBuyFareAmount());
										if (seaContainerReservationMobile.getFareAmount() != null)
											seaContainerRezervation.setFareAmount(seaContainerReservationMobile.getFareAmount());
										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail.setBuyCurrency(currencyService.getById(seaFreightBuyTariffDetMobile.getCurrency().getId()));
									offerSeaDetail.setCurrency(currencyService.getById(seaFreightBuyTariffDetMobile.getCurrency().getId()));
									offerSeaDetail.setTransitTime(seaFreightBuyTariffDetMobile.getTransitTime());
									offerSeaDetail.setFreeTime(seaFreightBuyTariffDetMobile.getFreeTime());
									offerSeaDetail.setQuationNo(seaFreightBuyTariffDetMobile.getQuationNo());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												Company itemCompany = null;
												if(seaTariffDetMobile.getItemCompany() != null) {
													itemCompany = companyService.getById(seaTariffDetMobile.getItemCompany().getId());
												}

												if(j == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													buyOfferSeaCharge.setItemCompany(itemCompany);

													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
													offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
													offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													offerSeaCharge.setInvoiceItemDC("DB");
													offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													if (isOfferSeaChargeOnPosition) {
														if (offerSeaDetail.getIsPosSaleFreight()) {
															offerSeaCharge.setGoodPosition("POSITION");
														}
													} else {
														offerSeaCharge.setGoodPosition("GOOD");
													}
													offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
													offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													offerSeaCharge.setInvoiceItemCompany("customer");
													offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
													offerSeaCharge.setItemCompany(itemCompany);

													offerSeaChargesService.save(offerSeaCharge);
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
															buyOfferSeaCharge.setItemCompany(itemCompany);

															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																offerSeaCharge.setItemCompany(itemCompany);

																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setItemCompany(itemCompany);
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setItemCompany(itemCompany);
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									j++;
								}
							}
						}
						if (seaFreightBuyTariffDetMobile.getShipOwner() != null) {
							offerSeaDetail.setShipOwner(companyService.getById(seaFreightBuyTariffDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail.setAmount(seaFreightBuyTariffDetMobile.getAmount());
						offerSeaDetail.setBuyAmount(seaFreightBuyTariffDetMobile.getBuyAmount());
						offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
						offerSeaDetailService.saveOfferStatus(offerSeaDetail, "inProgressCompleted", null, null, OfferStatus::setOfferSeaDetail);
					} else {
						OfferSeaDetail offerSeaDetail2 = offerSeaDetailService.newEntity();
						if (seaFreightBuyTariffDetMobile.getShipOwner() != null) {
							offerSeaDetail2.setShipOwner(companyService.getById(seaFreightBuyTariffDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail2.setAmount(seaFreightBuyTariffDetMobile.getAmount());
						offerSeaDetail2.setBuyAmount(seaFreightBuyTariffDetMobile.getBuyAmount());
						offerSeaDetail2.setOfferSea(offerSea1);
						offerSeaDetail2.setImo(activityOperation.getImo());
						offerSeaDetail2.setClassInfo(activityOperation.getClassInfo());
						offerSeaDetail2.setUnNo(activityOperation.getUnNo());
						offerSeaDetail2.setFlashPoint(activityOperation.getFlashPoint());
						if(constantService.getBoolean("OFFER_CURRENCY",null)) {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
						} else {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
						}
						offerSeaDetail2 = offerSeaDetailService.save(offerSeaDetail2);
						List<SeaContainerRezervation> seaContainerRezervations2 = seaContainerRezervationService.getByOfferSeaDetailIdAndContainerTypeNull(offerSeaDetail2.getId());
						if(!seaContainerRezervations2.isEmpty()){
							seaContainerRezervationService.deleteAll(seaContainerRezervations2);
							offerSeaDetail2.getSeaContainerRezervations().removeAll(seaContainerRezervations2);
						}
						offerSeaDetail2 = offerSeaDetailService.getById(offerSeaDetail2.getId());
						for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
							SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
							seaContainerRezervation.setOfferSeaDetail(offerSeaDetail2);
							seaContainerRezervation.setCount(activityOperationDetail.getCount());
							seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
							seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
							seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
							seaContainerRezervation.setLength(activityOperationDetail.getLength());
							seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
							seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
							seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
							seaContainerRezervationService.save(seaContainerRezervation);
						}
						if(!seaFreightBuyTariffDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail2.getId());
							if(!seaContainerRezervations.isEmpty()){
								int k = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFreightBuyTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFreightBuyTariffDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFreightBuyTariffDetMobile.getId());
									}
									if(seaContainerReservationMobile != null){
										seaContainerRezervation.setBuyFareAmount(seaContainerReservationMobile.getBuyFareAmount());
										seaContainerRezervation.setFareAmount(seaContainerReservationMobile.getFareAmount());
										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail2.setBuyCurrency(currencyService.getById(seaFreightBuyTariffDetMobile.getCurrency().getId()));
									offerSeaDetail2.setCurrency(currencyService.getById(seaFreightBuyTariffDetMobile.getCurrency().getId()));
									offerSeaDetail2.setTransitTime(seaFreightBuyTariffDetMobile.getTransitTime());
									offerSeaDetail2.setFreeTime(seaFreightBuyTariffDetMobile.getFreeTime());
									offerSeaDetail2.setQuationNo(seaFreightBuyTariffDetMobile.getQuationNo());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												if(k == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
														OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
														offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														offerSeaCharge.setInvoiceItemDC("DB");
														offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														if (isOfferSeaChargeOnPosition) {
															if (offerSeaDetail2.getIsPosSaleFreight()) {
																offerSeaCharge.setGoodPosition("POSITION");
															}
														} else {
															offerSeaCharge.setGoodPosition("GOOD");
														}
														offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
														offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														offerSeaCharge.setInvoiceItemCompany("customer");
														offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
														offerSeaChargesService.save(offerSeaCharge);
													}
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail2.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail2.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail2.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									k++;
								}
							}
						}
						offerSeaDetailService.save(offerSeaDetail2);
                        offerSeaDetailService.saveOfferStatus(offerSeaDetail2, "inProgressCompleted", null, null, OfferStatus::setOfferSeaDetail);
					}
					i++;
				}
			} else if(mobileDto != null && mobileDto.getSeaFreightTariffDetMobiles() != null && mobileDto.getSeaFreightTariffDetMobiles().size() > 0) {
				int i = 0;
				for(SeaFreightTariffDetMobile seaFreightTariffDetMobile : mobileDto.getSeaFreightTariffDetMobiles()){
					OfferSea offerSea1 = this.getByOfferIdAndFromPortIdAndToPortId(offer.getId(), seaFreightTariffDetMobile.getFromPort().getId(), seaFreightTariffDetMobile.getToPort().getId());
					Boolean offerSeaNull = Boolean.FALSE;
					if(offerSea1 == null){
						offerSeaNull = Boolean.TRUE;
						i = 0;
						offerSea1 = this.newEntity();
						if(offer != null){
							offerSea1 = this.createFromOffer(offer.getId());
						}
						offerSea1.setTransportDirection(activityOperation.getTransportDirection());
						offerSea1.setIncoterm(activityOperation.getIncoterm());
						if(offerSea1.getValidFrom() == null){
							offerSea1.setValidFrom(LocalDateTime.now());
						}
						if(offerSea1.getValidTo() == null){
							offerSea1.setValidTo(LocalDateTime.now().plusDays(7));
						}
						offerSea1.setCustomer(activity.getCompany());
						offerSea1.setSalesChannel(activityOperation.getSalesChannel());
						offerSea1.setPartialFull("F");
						offerSea1.setDescription(activityOperation.getDescription());
						offerSea1.setSalesRepresentative(activityOperation.getSalesRepresentative());
						offerSea1.setActivityOperation(activityOperation);
						offerSea1.setVolume(activityOperation.getVolume());
						offerSea1.setFromPort(seaportService.getById(seaFreightTariffDetMobile.getFromPort().getId()));
						offerSea1.setToPort(seaportService.getById(seaFreightTariffDetMobile.getToPort().getId()));
						offerSea1.setLoadCountry(activityOperation.getDepartureCountry());
						offerSea1.setLoadCity(activityOperation.getDepartureCity());
						offerSea1.setUnloadCountry(activityOperation.getArrivalCountry());
						offerSea1.setUnloadCity(activityOperation.getArrivalCity());
						offerSea1.setLoadPlace(activityOperation.getLoadPlace());
						offerSea1.setUnloadPlace(activityOperation.getUnloadPlace());
						offerSea1.setLoadAddress(activityOperation.getLoadAddress());
						offerSea1.setUnloadAddress(activityOperation.getUnloadAddress());
						offerSea1.setLoadZip(activityOperation.getLoadZip());
						offerSea1.setUnloadZip(activityOperation.getUnloadZip());
						offerSea1.setLoadCountry(activityOperation.getLoadCountry());
						offerSea1.setUnloadCountry(activityOperation.getUnloadCountry());
						offerSea1.setLoadCity(activityOperation.getLoadCity());
						offerSea1.setUnloadCity(activityOperation.getUnloadCity());
						offerSea1.setLoadDistrict(activityOperation.getLoadDistrict());
						offerSea1.setUnloadDistrict(activityOperation.getUnloadDistrict());
						offerSea1.setShipOwnernotShow(mobileDto.getShipOwnerNotShow());
						offerSea1.setPortFilling(mobileDto.getPortFilling());
						offerSea1 = this.saveWithControl(offerSea1, false);
					}
					offerSeaDetail = offerSeaDetailService.newEntity();
					if(i == 0 && !offerSea1.getOfferSeaDetails().isEmpty()){
						offerSeaDetail = offerSea1.getOfferSeaDetails().get(0);
						if (offerSeaNull) {
							for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
								SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
								seaContainerRezervation.setOfferSeaDetail(offerSeaDetail);
								seaContainerRezervation.setCount(activityOperationDetail.getCount());
								seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
								seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
								seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
								seaContainerRezervation.setLength(activityOperationDetail.getLength());
								seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
								seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
								seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
								seaContainerRezervationService.save(seaContainerRezervation);
							}
						}
					}
					if(i == 0){
						if(!seaFreightTariffDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail.getId());
							if(!seaContainerRezervations.isEmpty()){
								int j = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									if(seaContainerRezervation.getContainerType() == null){
										continue;
									}
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFreightTariffDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFreightTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFreightTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFreightTariffDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFreightTariffDetMobile.getId());
									}
									if(seaContainerReservationMobile != null){
										if (seaContainerReservationMobile.getBuyFareAmount() != null)
											seaContainerRezervation.setBuyFareAmount(seaContainerReservationMobile.getBuyFareAmount());

										// Sadece ithalat için tarifedeki ek masrafların konteyner tipi eşleşenler için ek masraflarıda tutara ilave ediyoruz.
										Double additionalExpense = 0d;
										if(offer.getTransportDirection() != null && offer.getTransportDirection().equals("I")) {
											if(mobileDto.getSeaFreightTariffDetMobiles() != null && mobileDto.getSeaFreightTariffDetMobiles().size() > 0) {
												for(SeaFreightTariffDetMobile f: mobileDto.getSeaFreightTariffDetMobiles()) {

													if(f.getSeaContainerRezervations() != null) {

														if(seaContainerReservationMobile.getSeaContainerType() != null) {
															Long seaContainerTypeId =  seaContainerReservationMobile.getSeaContainerType().getId();
															Double l = f.getSeaContainerRezervations().stream().filter(s -> s.getSeaContainerType() != null && s.getSeaContainerType().getId().equals(seaContainerTypeId)).mapToDouble(r -> r.getTotalAmount().doubleValue()).sum();

															if(l != null && l > 0) {
																additionalExpense = l;
															}

														}

													}
												}

											}
										}
										if (seaContainerReservationMobile.getFareAmount() != null) {
											seaContainerRezervation.setFareAmount((seaContainerReservationMobile.getFareAmount() + additionalExpense));
										}

										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail.setBuyCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
									offerSeaDetail.setCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
									offerSeaDetail.setTransitTime(seaFreightTariffDetMobile.getTransitTime());
									offerSeaDetail.setFreeTime(seaFreightTariffDetMobile.getFreeTime());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												Company itemCompany = null;
												if(seaTariffDetMobile.getItemCompany() != null) {
													itemCompany = companyService.getById(seaTariffDetMobile.getItemCompany().getId());
												}

												if(j == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													buyOfferSeaCharge.setItemCompany(itemCompany);

													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
													offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
													offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													offerSeaCharge.setInvoiceItemDC("DB");
													offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													if (isOfferSeaChargeOnPosition) {
														if (offerSeaDetail.getIsPosSaleFreight()) {
															offerSeaCharge.setGoodPosition("POSITION");
														}
													} else {
														offerSeaCharge.setGoodPosition("GOOD");
													}
													offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
													offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													offerSeaCharge.setInvoiceItemCompany("customer");
													offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
													offerSeaCharge.setItemCompany(itemCompany);

													offerSeaChargesService.save(offerSeaCharge);
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
															buyOfferSeaCharge.setItemCompany(itemCompany);

															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																offerSeaCharge.setItemCompany(itemCompany);

																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setItemCompany(itemCompany);
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setItemCompany(itemCompany);
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									j++;
								}
							}
						}
						if (seaFreightTariffDetMobile.getShipOwner() != null) {
							offerSeaDetail.setShipOwner(companyService.getById(seaFreightTariffDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail.setAmount(seaFreightTariffDetMobile.getAmount());
						offerSeaDetail.setBuyAmount(seaFreightTariffDetMobile.getBuyAmount());
						offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
						offerSeaDetailService.saveOfferStatus(offerSeaDetail, "inProgressCompleted", null, null, OfferStatus::setOfferSeaDetail);
					} else {
						OfferSeaDetail offerSeaDetail2 = offerSeaDetailService.newEntity();
						if (seaFreightTariffDetMobile.getShipOwner() != null) {
							offerSeaDetail2.setShipOwner(companyService.getById(seaFreightTariffDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail2.setAmount(seaFreightTariffDetMobile.getAmount());
						offerSeaDetail2.setBuyAmount(seaFreightTariffDetMobile.getBuyAmount());
						offerSeaDetail2.setOfferSea(offerSea1);
						offerSeaDetail2.setImo(activityOperation.getImo());
						offerSeaDetail2.setClassInfo(activityOperation.getClassInfo());
						offerSeaDetail2.setUnNo(activityOperation.getUnNo());
						offerSeaDetail2.setFlashPoint(activityOperation.getFlashPoint());
						if(constantService.getBoolean("OFFER_CURRENCY",null)) {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
						} else {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
						}
						offerSeaDetail2 = offerSeaDetailService.save(offerSeaDetail2);
						List<SeaContainerRezervation> seaContainerRezervations2 = seaContainerRezervationService.getByOfferSeaDetailIdAndContainerTypeNull(offerSeaDetail2.getId());
						if(!seaContainerRezervations2.isEmpty()){
							seaContainerRezervationService.deleteAll(seaContainerRezervations2);
							offerSeaDetail2.getSeaContainerRezervations().removeAll(seaContainerRezervations2);
						}
						offerSeaDetail2 = offerSeaDetailService.getById(offerSeaDetail2.getId());
						for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
								SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
								seaContainerRezervation.setOfferSeaDetail(offerSeaDetail2);
								seaContainerRezervation.setCount(activityOperationDetail.getCount());
								seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
								seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
								seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
								seaContainerRezervation.setLength(activityOperationDetail.getLength());
								seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
								seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
								seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
								seaContainerRezervationService.save(seaContainerRezervation);
						}
						if(!seaFreightTariffDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail2.getId());
							if(!seaContainerRezervations.isEmpty()){
								int k = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFreightTariffDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFreightTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFreightTariffDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFreightTariffDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFreightTariffDetMobile.getId());
									}
									if(seaContainerReservationMobile != null){
										seaContainerRezervation.setBuyFareAmount(seaContainerReservationMobile.getBuyFareAmount());
										seaContainerRezervation.setFareAmount(seaContainerReservationMobile.getFareAmount());
										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail2.setBuyCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
									offerSeaDetail2.setCurrency(currencyService.getById(seaFreightTariffDetMobile.getCurrency().getId()));
									offerSeaDetail2.setTransitTime(seaFreightTariffDetMobile.getTransitTime());
									offerSeaDetail2.setFreeTime(seaFreightTariffDetMobile.getFreeTime());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												if(k == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
														OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
														offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														offerSeaCharge.setInvoiceItemDC("DB");
														offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														if (isOfferSeaChargeOnPosition) {
															if (offerSeaDetail2.getIsPosSaleFreight()) {
																offerSeaCharge.setGoodPosition("POSITION");
															}
														} else {
															offerSeaCharge.setGoodPosition("GOOD");
														}
														offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
														offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														offerSeaCharge.setInvoiceItemCompany("customer");
														offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
														offerSeaChargesService.save(offerSeaCharge);
													}
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail2.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail2.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail2.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									k++;
								}
							}
						}
						offerSeaDetailService.save(offerSeaDetail2);
						offerSeaDetailService.saveOfferStatus(offerSeaDetail2, "inProgressCompleted", null, null, OfferStatus::setOfferSeaDetail);
					}
					i++;
				}
			}
			else if (mobileDto != null && mobileDto.getSeaFrightRequestDetMobiles() != null && mobileDto.getSeaFrightRequestDetMobiles().size() > 0) {
				int i = 0;
				for(SeaFrightRequestDetMobile seaFrightRequestDetMobile : mobileDto.getSeaFrightRequestDetMobiles()){
					OfferSea offerSea1 = this.getByOfferIdAndFromPortIdAndToPortId(offer.getId(), seaFrightRequestDetMobile.getFromPort().getId(), seaFrightRequestDetMobile.getToPort().getId());
					Boolean offerSeaNull = Boolean.FALSE;
					if(offerSea1 == null){
						offerSeaNull = Boolean.TRUE;
						i = 0;
						offerSea1 = this.newEntity();
						if(offer != null){
							offerSea1 = this.createFromOffer(offer.getId());
						}
						offerSea1.setTransportDirection(activityOperation.getTransportDirection());
						offerSea1.setIncoterm(activityOperation.getIncoterm());
						if(offerSea1.getValidFrom() == null){
							offerSea1.setValidFrom(LocalDateTime.now());
						}
						if(offerSea1.getValidTo() == null){
							offerSea1.setValidTo(LocalDateTime.now().plusDays(7));
						}
						offerSea1.setCustomer(activity.getCompany());
						offerSea1.setSalesChannel(activityOperation.getSalesChannel());
						offerSea1.setPartialFull("F");
						offerSea1.setDescription(activityOperation.getDescription());
						offerSea1.setSalesRepresentative(activityOperation.getSalesRepresentative());
						offerSea1.setActivityOperation(activityOperation);
						offerSea1.setVolume(activityOperation.getVolume());
						offerSea1.setFromPort(seaportService.getById(seaFrightRequestDetMobile.getFromPort().getId()));
						offerSea1.setToPort(seaportService.getById(seaFrightRequestDetMobile.getToPort().getId()));
						offerSea1.setLoadCountry(activityOperation.getDepartureCountry());
						offerSea1.setLoadCity(activityOperation.getDepartureCity());
						offerSea1.setUnloadCountry(activityOperation.getArrivalCountry());
						offerSea1.setUnloadCity(activityOperation.getArrivalCity());
						offerSea1.setLoadPlace(activityOperation.getLoadPlace());
						offerSea1.setUnloadPlace(activityOperation.getUnloadPlace());
						offerSea1.setLoadAddress(activityOperation.getLoadAddress());
						offerSea1.setUnloadAddress(activityOperation.getUnloadAddress());
						offerSea1.setLoadZip(activityOperation.getLoadZip());
						offerSea1.setUnloadZip(activityOperation.getUnloadZip());
						offerSea1.setLoadCountry(activityOperation.getLoadCountry());
						offerSea1.setUnloadCountry(activityOperation.getUnloadCountry());
						offerSea1.setLoadCity(activityOperation.getLoadCity());
						offerSea1.setUnloadCity(activityOperation.getUnloadCity());
						offerSea1.setLoadDistrict(activityOperation.getLoadDistrict());
						offerSea1.setUnloadDistrict(activityOperation.getUnloadDistrict());
						offerSea1.setShipOwnernotShow(mobileDto.getShipOwnerNotShow());
						offerSea1.setPortFilling(mobileDto.getPortFilling());
						offerSea1 = this.saveWithControl(offerSea1, false);
					}
					offerSeaDetail = offerSeaDetailService.newEntity();
					if(i == 0 && !offerSea1.getOfferSeaDetails().isEmpty()){
						offerSeaDetail = offerSea1.getOfferSeaDetails().get(0);
						if (offerSeaNull) {
							for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
								SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
								seaContainerRezervation.setOfferSeaDetail(offerSeaDetail);
								seaContainerRezervation.setCount(activityOperationDetail.getCount());
								seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
								seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
								seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
								seaContainerRezervation.setLength(activityOperationDetail.getLength());
								seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
								seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
								seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
								seaContainerRezervationService.save(seaContainerRezervation);
							}
						}
					}
					if(i == 0){
						if(!seaFrightRequestDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail.getId());
							if(!seaContainerRezervations.isEmpty()){
								int j = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									if(seaContainerRezervation.getContainerType() == null){
										continue;
									}
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFrightRequestDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFrightRequestDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFrightRequestDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFrightRequestDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFrightRequestDetMobile.getId());
									}
									if(seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getIsTargetAmount()) {
											seaContainerRezervation.setSalesTargetAmount(seaContainerReservationMobile.getSalesTargetAmount());
										} else {
											seaContainerRezervation.setFareAmount(seaContainerReservationMobile.getFareAmount());
										}


										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail.setBuyCurrency(currencyService.getById(seaFrightRequestDetMobile.getCurrency().getId()));
									offerSeaDetail.setCurrency(currencyService.getById(seaFrightRequestDetMobile.getCurrency().getId()));
									offerSeaDetail.setTransitTime(seaFrightRequestDetMobile.getTransitTime());
									offerSeaDetail.setFreeTime(seaFrightRequestDetMobile.getFreeTime());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												Company itemCompany = null;
												if(seaTariffDetMobile.getItemCompany() == null) {
													companyService.getById(seaTariffDetMobile.getItemCompany().getId());
												}
												if(j == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													buyOfferSeaCharge.setItemCompany(itemCompany);
													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
													offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
													offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													offerSeaCharge.setInvoiceItemDC("DB");
													offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													if (isOfferSeaChargeOnPosition) {
														if (offerSeaDetail.getIsPosSaleFreight()) {
															offerSeaCharge.setGoodPosition("POSITION");
														}
													} else {
														offerSeaCharge.setGoodPosition("GOOD");
													}
													offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
													offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													offerSeaCharge.setInvoiceItemCompany("customer");
													offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
													offerSeaCharge.setItemCompany(itemCompany);
													offerSeaChargesService.save(offerSeaCharge);
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									j++;
								}
							}
						}
						if (seaFrightRequestDetMobile.getShipOwner() != null) {
							offerSeaDetail.setShipOwner(companyService.getById(seaFrightRequestDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail.setAmount(seaFrightRequestDetMobile.getAmount());
						offerSeaDetail.setBuyAmount(seaFrightRequestDetMobile.getBuyAmount());
						offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
						offerSeaDetailService.saveOfferStatus(offerSeaDetail, "pricing", null, null, OfferStatus::setOfferSeaDetail);
					} else {
						OfferSeaDetail offerSeaDetail2 = offerSeaDetailService.newEntity();
						if (seaFrightRequestDetMobile.getShipOwner() != null) {
							offerSeaDetail2.setShipOwner(companyService.getById(seaFrightRequestDetMobile.getShipOwner().getId()));
						}
						offerSeaDetail2.setAmount(seaFrightRequestDetMobile.getAmount());
						offerSeaDetail2.setBuyAmount(seaFrightRequestDetMobile.getBuyAmount());
						offerSeaDetail2.setOfferSea(offerSea1);
						offerSeaDetail2.setImo(activityOperation.getImo());
						offerSeaDetail2.setClassInfo(activityOperation.getClassInfo());
						offerSeaDetail2.setUnNo(activityOperation.getUnNo());
						offerSeaDetail2.setFlashPoint(activityOperation.getFlashPoint());
						if(constantService.getBoolean("OFFER_CURRENCY",null)) {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("OFFER_DEFAULT_CURRENCY"));
						} else {
							offerSeaDetail2.setCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
							offerSeaDetail2.setBuyCurrency((Currency) commonUtil.getConstantByEntity("REPORT_CURRENCY"));
						}
						offerSeaDetail2 = offerSeaDetailService.save(offerSeaDetail2);
						List<SeaContainerRezervation> seaContainerRezervations2 = seaContainerRezervationService.getByOfferSeaDetailIdAndContainerTypeNull(offerSeaDetail2.getId());
						if(!seaContainerRezervations2.isEmpty()){
							seaContainerRezervationService.deleteAll(seaContainerRezervations2);
							offerSeaDetail2.getSeaContainerRezervations().removeAll(seaContainerRezervations2);
						}
						offerSeaDetail2 = offerSeaDetailService.getById(offerSeaDetail2.getId());
						for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
							SeaContainerRezervation seaContainerRezervation = seaContainerRezervationService.newEntity();
							seaContainerRezervation.setOfferSeaDetail(offerSeaDetail2);
							seaContainerRezervation.setCount(activityOperationDetail.getCount());
							seaContainerRezervation.setTonnage(activityOperationDetail.getTonnage());
							seaContainerRezervation.setContainerType(activityOperationDetail.getSeaContainerType());
							seaContainerRezervation.setOverflow(activityOperationDetail.getOverflow());
							seaContainerRezervation.setLength(activityOperationDetail.getLength());
							seaContainerRezervation.setWidth(activityOperationDetail.getWidth());
							seaContainerRezervation.setHeight(activityOperationDetail.getHeight());
							seaContainerRezervation.setSetDegree(activityOperationDetail.getSetDegree());
							seaContainerRezervationService.save(seaContainerRezervation);
						}
						if(!seaFrightRequestDetMobile.getSeaContainerRezervations().isEmpty()){
							List<SeaContainerRezervation> seaContainerRezervations = seaContainerRezervationService.getSeaContainerRezervationsByOfferSeaDetailId(offerSeaDetail2.getId());
							if(!seaContainerRezervations.isEmpty()){
								int k = 0;
								for(SeaContainerRezervation seaContainerRezervation : seaContainerRezervations){
									SeaContainerReservationMobile seaContainerReservationMobile = null;
									if (seaContainerRezervation.getTonnage() != null && seaContainerRezervation.getTonnage() != 0d) {
										List<SeaContainerReservationMobile> tonnageSeaContainerReservationMobiles = seaFrightRequestDetMobile.getSeaContainerRezervations().stream()
												.filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId()) && e.getTonnage() != null && e.getTonnage() >= seaContainerRezervation.getTonnage()).collect(Collectors.toList());
										if (tonnageSeaContainerReservationMobiles != null && tonnageSeaContainerReservationMobiles.size() >0) {
											tonnageSeaContainerReservationMobiles.stream().sorted(Comparator.comparing(SeaContainerReservationMobile::getTonnage)).collect(Collectors.toList());
											seaContainerReservationMobile = tonnageSeaContainerReservationMobiles.get(0);
										} else {
											seaContainerReservationMobile = seaFrightRequestDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
										}
									} else {
										seaContainerReservationMobile = seaFrightRequestDetMobile.getSeaContainerRezervations().stream().filter(e -> seaContainerRezervation.getContainerType().getId().equals(e.getSeaContainerType().getId())).findAny().orElse(null);
									}
									SeaFreightBuyTariffDet seaFreightBuyTariffDet = null;
									if (seaFrightRequestDetMobile.getId() != null) {
										seaFreightBuyTariffDet = seaFreightBuyTariffDetService.getById(seaFrightRequestDetMobile.getId());
									}
									if(seaContainerReservationMobile != null){
										seaContainerRezervation.setBuyFareAmount(seaContainerReservationMobile.getBuyFareAmount());
										seaContainerRezervation.setSalesTargetAmount(seaContainerReservationMobile.getSalesTargetAmount());
										if(seaFreightBuyTariffDet != null){
											seaContainerRezervation.setSeaFreightBuyTariff(seaFreightBuyTariffDet.getSeaFreightBuyTariff());
										}
										seaContainerRezervationService.save(seaContainerRezervation);
									}
									offerSeaDetail2.setBuyCurrency(currencyService.getById(seaFrightRequestDetMobile.getCurrency().getId()));
									offerSeaDetail2.setCurrency(currencyService.getById(seaFrightRequestDetMobile.getCurrency().getId()));
									offerSeaDetail.setTransitTime(seaFrightRequestDetMobile.getTransitTime());
									offerSeaDetail.setFreeTime(seaFrightRequestDetMobile.getFreeTime());
									if (seaContainerReservationMobile != null) {
										if(seaContainerReservationMobile.getSeaTariffDetMobiles() != null && seaContainerReservationMobile.getSeaTariffDetMobiles().size() > 0){
											for(SeaTariffDetMobile seaTariffDetMobile : seaContainerReservationMobile.getSeaTariffDetMobiles()){
												if(k == 0){
													OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
													buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
													buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
													buyOfferSeaCharge.setInvoiceItemDC("CR");
													buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
													buyOfferSeaCharge.setGoodPosition("POSITION");
													buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
													buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
													buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
													buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
													if (seaTariffDetMobile.getId() != null) {
														SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
														if(seaTariffDet != null){
															buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
															buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
															buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
															buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
														}
													}
													buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
													if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
														OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
														offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														offerSeaCharge.setInvoiceItemDC("DB");
														offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														if (isOfferSeaChargeOnPosition) {
															if (offerSeaDetail2.getIsPosSaleFreight()) {
																offerSeaCharge.setGoodPosition("POSITION");
															}
														} else {
															offerSeaCharge.setGoodPosition("GOOD");
														}
														offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
														offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														offerSeaCharge.setInvoiceItemCompany("customer");
														offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
														offerSeaChargesService.save(offerSeaCharge);
													}
												} else {
													List<OfferSeaCharges> offerSeaCharges = offerSeaChargesService.getByOfferSeaDetailId(offerSeaDetail2.getId());
													if(!offerSeaCharges.isEmpty()){
														OfferSeaCharges offerSeaCharges1 = offerSeaCharges.stream().filter(e -> seaTariffDetMobile.getInvoiceItemType().getId().equals(e.getInvoiceItemType().getId()) && seaTariffDetMobile.getCType().equals(e.getCalculateType())).findAny().orElse(null);
														if(offerSeaCharges1 == null){
															OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
															buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															buyOfferSeaCharge.setInvoiceItemDC("CR");
															buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															buyOfferSeaCharge.setGoodPosition("POSITION");
															buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
															buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
															buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
															if (seaTariffDetMobile.getId() != null) {
																SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
																if(seaTariffDet != null){
																	buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																	buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																	buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																	buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																	buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
																}
															}
															buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
															if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
																OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
																offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
																offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
																offerSeaCharge.setInvoiceItemDC("DB");
																offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
																if (isOfferSeaChargeOnPosition) {
																	if (offerSeaDetail2.getIsPosSaleFreight()) {
																		offerSeaCharge.setGoodPosition("POSITION");
																	}
																} else {
																	offerSeaCharge.setGoodPosition("GOOD");
																}
																offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
																offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
																offerSeaCharge.setInvoiceItemCompany("customer");
																offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
																offerSeaChargesService.save(offerSeaCharge);
															}
														}
													} else {
														OfferSeaCharges buyOfferSeaCharge = offerSeaChargesService.newEntity();
														buyOfferSeaCharge.setOfferSeaDetail(offerSeaDetail2);
														buyOfferSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
														buyOfferSeaCharge.setInvoiceItemDC("CR");
														buyOfferSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
														buyOfferSeaCharge.setGoodPosition("POSITION");
														buyOfferSeaCharge.setAmount(seaTariffDetMobile.getBuyAmount());
														buyOfferSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
														buyOfferSeaCharge.setInvoiceItemCompany("shipOwner");
														buyOfferSeaCharge.setIsFreightCharge(seaTariffDetMobile.getIsFreightCharge());
														if (seaTariffDetMobile.getId() != null) {
															SeaTariffDet seaTariffDet = seaTariffDetService.getById(seaTariffDetMobile.getId());
															if(seaTariffDet != null){
																buyOfferSeaCharge.setSeaTariffDet(seaTariffDet);
																buyOfferSeaCharge.setSeaTariff(seaTariffDet.getSeaTariff());
																buyOfferSeaCharge.setGoodPosition(seaTariffDet.getSeaTariff().getGoodPosition());
																buyOfferSeaCharge.setInvoiceItemCompany(seaTariffDet.getInvoiceItemCompany());
																buyOfferSeaCharge.setIsFreightCharge(seaTariffDet.getSeaTariff().getIsFreightCharge());
															}
														}
														buyOfferSeaCharge = offerSeaChargesService.save(buyOfferSeaCharge);
														if(seaTariffDetMobile.getAmount() != null && seaTariffDetMobile.getAmount().compareTo(new BigDecimal(0)) ==1){
															OfferSeaCharges offerSeaCharge = offerSeaChargesService.newEntity();
															offerSeaCharge.setOfferSeaDetail(offerSeaDetail2);
															offerSeaCharge.setInvoiceItemType(invoiceItemTypeService.getById(seaTariffDetMobile.getInvoiceItemType().getId()));
															offerSeaCharge.setInvoiceItemDC("DB");
															offerSeaCharge.setCalculateType(seaTariffDetMobile.getCType());
															if (isOfferSeaChargeOnPosition) {
																if (offerSeaDetail2.getIsPosSaleFreight()) {
																	offerSeaCharge.setGoodPosition("POSITION");
																}
															} else {
																offerSeaCharge.setGoodPosition("GOOD");
															}
															offerSeaCharge.setAmount(seaTariffDetMobile.getAmount());
															offerSeaCharge.setCurrency(currencyService.getById(seaTariffDetMobile.getCurrency().getId()));
															offerSeaCharge.setInvoiceItemCompany("customer");
															offerSeaCharge.setIsFreightCharge(buyOfferSeaCharge.getIsFreightCharge());
															offerSeaChargesService.save(offerSeaCharge);
														}
													}
												}
											}
										}
									}
									k++;
								}
							}
						}
						offerSeaDetail2 = offerSeaDetailService.save(offerSeaDetail2);
						offerSeaDetailService.saveOfferStatus(offerSeaDetail2, "pricing", null, null, OfferStatus::setOfferSeaDetail);
					}
					i++;
				}
			} else {
				offerService.createOfferSeaCharges(offerSeaDetail.getId(), false);
				if (offerSeaDetail.getShipOwner() != null) {
					offerService.calculateSeaFreightBuyTariff(offerSeaDetail.getId());
					offerService.calculateSeaFreightTariff(offerSeaDetail.getId());
					offerService.calculateIncoOfferSeaBuyCharges(offerSeaDetail.getId());
					offerService.calculateIncoOfferSeaCharges(offerSeaDetail.getId());
				}
				offerSeaDetail = offerSeaDetailService.save(offerSeaDetail);
				if (mobileDto.getIsPricing() != null && mobileDto.getIsPricing()) {
					SeaContainerRezervation seaContainerRezervation = offerSeaDetail.getSeaContainerRezervations().stream().filter(e -> e.getSeaFreightTariff() == null).findAny().orElse(null);
					if(seaContainerRezervation != null){
						offerSeaDetailService.saveOfferStatus(offerSeaDetail, "pricing", null, null, OfferStatus::setOfferSeaDetail);
					}
				} else {
					offerSeaDetailService.saveOfferStatus(offerSeaDetail, "inProgressCompleted", null, null, OfferStatus::setOfferSeaDetail);
				}
			}
			if(mobileDto.getFreeTime() != null) offerSeaDetail.setFreeTime(mobileDto.getFreeTime());
			offerSeaDetailService.save(offerSeaDetail);
		}
		List<OfferSea> offerSeas = this.getOfferSeasByOfferId(offer.getId());
		for(OfferSea offerSea2 : offerSeas){
			if(!"PTP".equals(offer.getPickupDelivery())){
				List<FrontEndTariffDet> frontEndList = new ArrayList<>();
				for(ActivityOperationDetail activityOperationDetail : activityOperationDetails){
					if(offer.getPickupDelivery().startsWith("D")){
						FrontEndTariffDet frontTariffDet = frontEndTariffDetService.newEntity();
						frontTariffDet.setOfferSea(offerSea2);
						frontTariffDet.setLoadingType("ADDRESS");
						frontTariffDet.setFromCountry(offerSea2.getLoadCountry());
						frontTariffDet.setFromCity(offerSea2.getLoadCity());
						frontTariffDet.setFromDistrict(offerSea2.getLoadDistrict());
						frontTariffDet.setFromZip(offerSea2.getLoadZip());
						frontTariffDet.setFromAddress(offerSea2.getLoadAddress());
						frontTariffDet.setUnloadingType("PORT");
						frontTariffDet.setToCountry(offerSea2.getFromPort().getAddress().getCountry());
						frontTariffDet.setToCity(offerSea2.getFromPort().getAddress().getCity());
						frontTariffDet.setToDistrict(offerSea2.getFromPort().getAddress().getDistrict());
						frontTariffDet.setToSeaPort(offerSea2.getFromPort());
						frontTariffDet.setCalculateUnit("K");
						frontTariffDet.setSeaContainerType(activityOperationDetail.getSeaContainerType());
						frontTariffDet.setFrontEnd("FRONT");
						if (offerSea2.getLoadCountry().getCodeTwo().equals("TR")) {
							InvoiceItemType invoiceItemType = (InvoiceItemType) constantService.getEntity("INLAND_FRONTEND_INVOICE_ITEM_TYPE",null);
							if (invoiceItemType != null && invoiceItemType.getId() != null) {
								frontTariffDet.setInvoiceItemType(invoiceItemTypeService.getById(invoiceItemType.getId()));
							}
						} else {
							InvoiceItemType invoiceItemType = (InvoiceItemType) constantService.getEntity("ABROAD_FRONTEND_INVOICE_ITEM_TYPE",null);
							if (invoiceItemType != null && invoiceItemType.getId() != null) {
								frontTariffDet.setInvoiceItemType(invoiceItemTypeService.getById(invoiceItemType.getId()));
							}
						}
						frontTariffDet = frontEndTariffDetService.save(frontTariffDet);
						frontEndList.add(frontTariffDet);
					}
					if(offer.getPickupDelivery().endsWith("D")){
						FrontEndTariffDet endTariffDet = frontEndTariffDetService.newEntity();
						endTariffDet.setOfferSea(offerSea2);
						endTariffDet.setLoadingType("PORT");
						endTariffDet.setFromCountry(offerSea2.getToPort().getAddress().getCountry());
						endTariffDet.setFromCity(offerSea2.getToPort().getAddress().getCity());
						endTariffDet.setFromDistrict(offerSea2.getToPort().getAddress().getDistrict());
						endTariffDet.setFromSeaPort(offerSea2.getToPort());
						endTariffDet.setUnloadingType("ADDRESS");
						endTariffDet.setToCountry(offerSea2.getUnloadCountry());
						endTariffDet.setToCity(offerSea2.getUnloadCity());
						endTariffDet.setToDistrict(offerSea2.getUnloadDistrict());
						endTariffDet.setToZip(offerSea2.getUnloadZip());
						endTariffDet.setToAddress(offerSea2.getUnloadAddress());
						endTariffDet.setCalculateUnit("K");
						endTariffDet.setSeaContainerType(activityOperationDetail.getSeaContainerType());
						endTariffDet.setFrontEnd("END");
						if (offerSea2.getUnloadCountry().getCodeTwo().equals("TR")) {
							InvoiceItemType invoiceItemType = (InvoiceItemType) constantService.getEntity("INLAND_FRONTEND_INVOICE_ITEM_TYPE",null);
							if (invoiceItemType != null && invoiceItemType.getId() != null) {
								endTariffDet.setInvoiceItemType(invoiceItemTypeService.getById(invoiceItemType.getId()));
							}
						} else {
							InvoiceItemType invoiceItemType = (InvoiceItemType) constantService.getEntity("ABROAD_FRONTEND_INVOICE_ITEM_TYPE",null);
							if (invoiceItemType != null && invoiceItemType.getId() != null) {
								endTariffDet.setInvoiceItemType(invoiceItemTypeService.getById(invoiceItemType.getId()));
							}
						}
						endTariffDet = frontEndTariffDetService.save(endTariffDet);
						frontEndList.add(endTariffDet);
					}
				}
				offerSea2.setFrontEndTariffDets(frontEndList);
			}
			if(mobileDto != null && mobileDto.getFrontEndTariffDetMobiles() != null && mobileDto.getFrontEndTariffDetMobiles().size() > 0){
				List<FrontEndTariffDet> frontEndTariffDets = frontEndTariffDetService.getByOfferSeaId(offerSea2.getId());
				if(!frontEndTariffDets.isEmpty()){
					for(FrontEndTariffDet frontEndTariffDet : frontEndTariffDets){
						int i = 0;
						FrontEndTariffDet finalFrontEndTariffDet = frontEndTariffDet;
						List<FrontEndTariffDetMobile> frontEndTariffDetMobileList = mobileDto.getFrontEndTariffDetMobiles().stream()
								.filter(e -> (finalFrontEndTariffDet.getFrontEnd().equals("FRONT") ? e.getFrontEnd().equals("frontTransport") && finalFrontEndTariffDet.getToSeaPort().getId().equals(e.getToSeaport().getId())
										: e.getFrontEnd().equals("endTransport") && finalFrontEndTariffDet.getFromSeaPort().getId().equals(e.getFromSeaport().getId())) &&
										finalFrontEndTariffDet.getSeaContainerType().getId().equals(e.getSeaContainerType().getId())).collect(Collectors.toList());
						if(frontEndTariffDetMobileList != null && frontEndTariffDetMobileList.size() >0){
							for (FrontEndTariffDetMobile frontEndTariffDetMobile : frontEndTariffDetMobileList) {
								FrontEndTariffDet buyFrontEndTariffDet = null;
								if (frontEndTariffDetMobile.getId() != null) {
									buyFrontEndTariffDet = frontEndTariffDetService.getById(frontEndTariffDetMobile.getId());
								}
								if (i == 0) {
									if(frontEndTariffDetMobile.getAmount() != null){
										frontEndTariffDet.setAmount(new BigDecimal(frontEndTariffDetMobile.getAmount()));
									}
									if(frontEndTariffDetMobile.getBuyAmount() != null){
										frontEndTariffDet.setBuyAmount(new BigDecimal(frontEndTariffDetMobile.getBuyAmount()));
									}
									frontEndTariffDet.setCalculateUnit(frontEndTariffDetMobile.getCalculateUnit());
									frontEndTariffDet.setCurrency(currencyService.getById(frontEndTariffDetMobile.getCurrency().getId()));
									frontEndTariffDet.setBuyCurrency(currencyService.getById(frontEndTariffDetMobile.getCurrency().getId()));
									if (frontEndTariffDetMobile.getSupplier() != null) {
										frontEndTariffDet.setSupplier(companyService.getById(frontEndTariffDetMobile.getSupplier().getId()));
									}
									if(buyFrontEndTariffDet != null){
										frontEndTariffDet.setBuyFrontEndTariffDet(buyFrontEndTariffDet);
										frontEndTariffDet.setBuyFrontEndTariff(buyFrontEndTariffDet.getFrontEndTariff());
									}
									frontEndTariffDet = frontEndTariffDetService.save(frontEndTariffDet);
								} else {
									FrontEndTariffDet frontEndTariffDet1 = frontEndTariffDetService.copy(frontEndTariffDet.getId());
									if(frontEndTariffDetMobile.getAmount() != null){
										frontEndTariffDet1.setAmount(new BigDecimal(frontEndTariffDetMobile.getAmount()));
									}
									if(frontEndTariffDetMobile.getBuyAmount() != null){
										frontEndTariffDet1.setBuyAmount(new BigDecimal(frontEndTariffDetMobile.getBuyAmount()));
									}
									frontEndTariffDet1.setCalculateUnit(frontEndTariffDetMobile.getCalculateUnit());
									frontEndTariffDet1.setCurrency(currencyService.getById(frontEndTariffDetMobile.getCurrency().getId()));
									frontEndTariffDet1.setBuyCurrency(currencyService.getById(frontEndTariffDetMobile.getCurrency().getId()));
									if (frontEndTariffDetMobile.getSupplier() != null) {
										frontEndTariffDet1.setSupplier(companyService.getById(frontEndTariffDetMobile.getSupplier().getId()));
									}
									if(buyFrontEndTariffDet != null){
										frontEndTariffDet1.setBuyFrontEndTariffDet(buyFrontEndTariffDet);
										frontEndTariffDet1.setBuyFrontEndTariff(buyFrontEndTariffDet.getFrontEndTariff());
									}
									frontEndTariffDetService.save(frontEndTariffDet1);
								}
								i++;
							}
						}
					}
				}
			} else {
				offerService.calculateSeaFrontEndTariff(offerSea2.getOfferSeaDetails().get(0).getId(), "BUY");
				offerService.calculateSeaFrontEndTariff(offerSea2.getOfferSeaDetails().get(0).getId(), "SALES");
			}
		}
		return this.save(offerSea);
	}
